auto_label_gpu: 0
data_cfg:
  names:
    0: Airplane
    1: Rotary Drone
    2: Fixed Wing Drone
    3: Fighter Jet
    4: Birds
    5: Helicopter
frame_index: 0
global_object_index: 0
gpu_list:
- 'GPU 0: Quadro RTX 8000 (UUID: GPU-0627d9ee-1acc-381e-6717-759d6ddbfaaa)'
- 'GPU 1: Quadro RTX 8000 (UUID: GPU-fca126cb-c645-592b-b37d-8738191e296f)'
- 'GPU 2: Quadro RTX 8000 (UUID: GPU-a2dd79b3-314d-a865-35ab-d3772342e1b9)'
- 'GPU 3: Quadro RTX 8000 (UUID: GPU-06c54b91-735e-c162-dcbb-8e2891de0103)'
- 'GPU 4: Quadro RTX 8000 (UUID: GPU-c3a3c219-e32d-6131-f1d6-dc84f545257a)'
- 'GPU 5: Quadro RTX 8000 (UUID: GPU-7ac32abd-d96c-5488-8c44-516e6de1ff50)'
images_dir: example_data/images
label_list:
- Airplane
- Rotary Drone
- Fixed Wing Drone
- Fighter Jet
- Birds
- Helicopter
paths:
  auto_label_data_path: example_data/images
  auto_label_model_weight_path: weights/coco_2_ijcnn_vr_full_2_real_world_combination_2_hololens_finetune-v3.pt
  auto_label_replacement: labels
  auto_label_save_path: example_data/labels/
  auto_label_script_path: scripts/inference.py
  cluster_script_path: scripts/cluster_objects.py
  combine_dataset_1_path: example_data/
  combine_dataset_2_path: example_data/
  combine_dataset_save_path: example_data_combined/
  combine_dataset_script_path: scripts/combine_yolo_dirs.py
  convert_video_copy_path: .
  convert_video_path: .
  convert_video_save_path: .
  convert_video_script_path: scripts/convert_mp4_2_png.py
  generate_venv_script_path: scripts/setup_venv.sh
  move_dest_path: .
  move_dir_script_path: scripts/move_dir.py
  move_src_path: .
  open_workspace: .
  prev_unverified_images_path: example_data/images
  prev_unverified_names_yaml_path: cfgs/gui/manual_labels/default.yaml
  rotate_images_path: example_data
  rotate_images_script_path: scripts/rotate_images.py
  split_data_path: example_data
  split_data_save_path: ''
  split_data_script_path: scripts/split_yolo_data_by_object.py
  subset_save_path: cfgs/gui/subset/new_subset.csv
  train_data_yaml_path: cfgs/yolo/data/default.yaml
  train_model_yaml_path: cfgs/yolo/model/default.yaml
  train_script_path: scripts/train_yolo.py
  train_train_yaml_path: cfgs/yolo/train/default.yaml
  unverified_images_path: example_data/images
  unverified_names_yaml_path: cfgs/gui/manual_labels/default.yaml
  unverified_subset_csv_path: cfgs/gui/subset/default.csv
  upload_save_path: .
  venv_path: ../envs/auto-label-engine
  video_file_path: generated_videos/current.mp4
python_codes:
  auto_label_script_path: "import argparse\nimport cv2\nfrom pathlib import Path\n\
    from ultralytics import YOLO  # Ensure you have installed ultralytics (pip install\
    \ ultralytics)\nfrom tqdm import tqdm\nimport os\n\ndef convert_to_yolo_format(box,\
    \ img_width, img_height):\n    \"\"\"\n    Convert box coordinates from (x1, y1,\
    \ x2, y2) to YOLO format:\n    (class, center_x, center_y, width, height) with\
    \ normalized values.\n    \"\"\"\n    x1, y1, x2, y2 = box.xyxy[0].cpu().numpy()\n\
    \    center_x = (x1 + x2) / 2.0 / img_width\n    center_y = (y1 + y2) / 2.0 /\
    \ img_height\n    box_width = (x2 - x1) / img_width\n    box_height = (y2 - y1)\
    \ / img_height\n    cls = int(box.cls[0].item())\n    return cls, center_x, center_y,\
    \ box_width, box_height\n\nfrom pathlib import Path\nimport cv2\nimport os\nfrom\
    \ tqdm import tqdm\nfrom ultralytics import YOLO  # Ensure YOLO (ultralytics)\
    \ is installed\n\ndef convert_to_yolo_format(box, img_width, img_height):\n  \
    \  \"\"\"\n    Convert box coordinates from (x1, y1, x2, y2) to YOLO format:\n\
    \    (class, center_x, center_y, width, height) with normalized values.\n    \"\
    \"\"\n    # Extract coordinates from the box (assumes single box per result)\n\
    \    x1, y1, x2, y2 = box.xyxy[0].cpu().numpy()\n    center_x = (x1 + x2) / 2.0\
    \ / img_width\n    center_y = (y1 + y2) / 2.0 / img_height\n    box_width = (x2\
    \ - x1) / img_width\n    box_height = (y2 - y1) / img_height\n    cls = int(box.cls[0].item())\n\
    \    return cls, center_x, center_y, box_width, box_height\n\ndef process_images_dirs(model_weights,\
    \ base_dir, label_replacement, gpu_number):\n    \"\"\"\n    Searches recursively\
    \ within the provided base directory for subdirectories \n    named exactly \"\
    images\" (case-insensitive). For each such images directory found,\n    it computes\
    \ a new save path by replacing the \"images\" folder with the provided \n    label_replacement\
    \ (e.g. \"labels\") in that directory's parent, then auto-labels\n    all image\
    \ files within the images directory using the YOLO model. Each image \n    file's\
    \ label file is stored in the corresponding labels directory so that the \n  \
    \  original folder structure is preserved.\n    \n    Args:\n        model_weights\
    \ (str): Path to the YOLO model weights file.\n        base_dir (str): Base directory\
    \ under which to search for subdirectories named \"images\".\n        label_replacement\
    \ (str): Folder name to use in place of \"images\" (e.g. \"labels\").\n      \
    \  gpu_number (int): GPU device number to use (or -1 to use the CPU).\n    \"\"\
    \"\n    # Load the YOLO model on the specified device.\n    device = f\"cuda:{gpu_number}\"\
    \ if gpu_number >= 0 else \"cpu\"\n    print(f\"Loading model weights from {model_weights}\
    \ on device {device}...\")\n    model = YOLO(model_weights).to(device)\n    print(\"\
    Model loaded successfully.\\n\")\n    \n    base_dir = Path(base_dir)\n    # Find\
    \ all subdirectories whose name is exactly \"images\" (case-insensitive)\n   \
    \ images_dirs = [d for d in base_dir.rglob(\"*\") if d.is_dir() and d.name.lower()\
    \ == \"images\"]\n    \n    if not images_dirs:\n        print(\"No images directories\
    \ found in the base directory.\")\n        return\n\n    print(f\"Found {len(images_dirs)}\
    \ images directories. Starting processing...\")\n    \n    for images_folder in\
    \ images_dirs:\n        print(f\"\\n--- Processing folder: {images_folder} ---\"\
    )\n        # Compute the corresponding labels folder by replacing the images folder\
    \ with the replacement.\n        # For example, if images_folder is /.../Copy\
    \ of area_denial_001/images,\n        # then label_folder will be /.../Copy of\
    \ area_denial_001/labels.\n        label_folder = images_folder.parent / label_replacement\n\
    \        os.makedirs(label_folder, exist_ok=True)\n        \n        # Process\
    \ all image files (non-recursively) within this images folder.\n        image_files\
    \ = [p for p in images_folder.iterdir() if p.is_file() and p.suffix.lower() in\
    \ [\".jpg\", \".jpeg\", \".png\"]]\n        print(f\"Found {len(image_files)}\
    \ images in {images_folder}\")\n        \n        for img_path in tqdm(image_files,\
    \ desc=f\"Processing {images_folder}\", leave=False):\n            # Read image\
    \ for dimensions.\n            image = cv2.imread(str(img_path))\n           \
    \ if image is None:\n                print(f\"Warning: Unable to read {img_path}\"\
    )\n                continue\n            img_height, img_width = image.shape[:2]\n\
    \            \n            # Run YOLO inference on the image.\n            results\
    \ = model.predict(str(img_path), verbose=False)\n            \n            # Build\
    \ the label file path inside the computed label_folder using the image's base\
    \ name.\n            label_file = label_folder / (img_path.stem + \".txt\")\n\
    \            os.makedirs(label_file.parent, exist_ok=True)\n            \n   \
    \         with open(label_file, \"w\") as f:\n                # Loop over each\
    \ detected box in the first result (assumes results[0] corresponds to the image)\n\
    \                boxes = results[0].boxes\n                for box in boxes:\n\
    \                    cls, center_x, center_y, box_width, box_height = convert_to_yolo_format(box,\
    \ img_width, img_height)\n                    f.write(f\"{cls} {center_x:.6f}\
    \ {center_y:.6f} {box_width:.6f} {box_height:.6f}\\n\")\n        print(f\"Finished\
    \ processing folder: {images_folder}\")\n    print(\"All images directories processed\
    \ successfully.\")\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(\n\
    \        description=\"Auto-label images using a YOLO model. \" +\n          \
    \          \"The labels directory is automatically computed by replacing the last\
    \ folder in the images path ('images') with the provided label replacement.\"\n\
    \    )\n    parser.add_argument(\"--model_weights_path\", required=True, help=\"\
    Path to the YOLO model weights file\")\n    parser.add_argument(\"--images_dir_path\"\
    , required=True, help=\"Path to the directory containing images (should be the\
    \ 'images' folder)\")\n    parser.add_argument(\"--label_replacement\", required=True,\
    \ help=\"Replacement for the 'images' folder (e.g., 'labels')\")\n    parser.add_argument(\"\
    --gpu_number\", type=int, default=0, help=\"GPU number to use. Set to -1 to use\
    \ CPU.\")\n    args = parser.parse_args()\n\n    process_images_dirs(args.model_weights_path,\
    \ args.images_dir_path, args.label_replacement, args.gpu_number)\n"
unverified_image_scale: 1.0
